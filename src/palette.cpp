// ===========================================================================
// $Source$
// $Revision$
// $Date$
// ===========================================================================
// Copyright (C) 1999 Tom Conder. All Rights Reserved.
//
// BY USING ANY PORTION OF THIS SOFTWARE, YOU AGREE TO THE FOLLOWING
// TERMS AND CONDITIONS:
// 
// Tom Conder, "THE AUTHOR", grants you, "THE USER", a non-exclusive,
// royalty free, license to use this software in source and binary code
// form, provided the user does not utilize the software in a manner
// which is disparaging to the author and the user acknowledges the
// author in any derivative work.
// 
// This software is provided "AS IS," without a warranty of any kind. ALL
// EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING
// ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE OR NON-INFRINGEMENT, ARE HEREBY EXCLUDED. THE AUTHOR SHALL NOT
// BE LIABLE FOR ANY DAMAGES SUFFERED BY THE USER AS A RESULT OF USING,
// MODIFYING OR DISTRIBUTING THE SOFTWARE OR ITS DERIVATIVES. IN NO EVENT
// WILL THE AUTHOR BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR
// DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE
// DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY,
// ARISING OUT OF THE USE OF OR INABILITY TO USE SOFTWARE, EVEN IF THE
// AUTHOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
// ===========================================================================
// Project:    Crusher md2 viewer
//
// File:       palette.cpp
//
// Written:    04 Oct. 1998 - Tom Conder <blitz@gazpacho.net>
//
// Description:
//    This module handles the 256 color palette.
// ===========================================================================
#include "stdafx.h"
#include "defs.h"
#include "errors.h"
#include "palette.h"
#include <malloc.h>

const int iDEFAULT_SKIN_COLOR = 15;

HPALETTE	hPalette;
HPALETTE	hpalOld;

static BOOL	bUses256Color = FALSE;

// the Quake 2 palette
static RGBQUAD		rgbQ2Palette[256] =
    {
    {0x00,0x00,0x00,0},{0x0f,0x0f,0x0f,0},{0x1f,0x1f,0x1f,0},{0x2f,0x2f,0x2f,0},
    {0x3f,0x3f,0x3f,0},{0x4b,0x4b,0x4b,0},{0x5b,0x5b,0x5b,0},{0x6b,0x6b,0x6b,0},
    {0x7b,0x7b,0x7b,0},{0x8b,0x8b,0x8b,0},{0x9b,0x9b,0x9b,0},{0xab,0xab,0xab,0},
    {0xbb,0xbb,0xbb,0},{0xcb,0xcb,0xcb,0},{0xdb,0xdb,0xdb,0},{0xeb,0xeb,0xeb,0},
    {0x23,0x4b,0x63,0},{0x1f,0x43,0x5b,0},{0x1f,0x3f,0x53,0},{0x1b,0x3b,0x4f,0},
    {0x1b,0x37,0x47,0},{0x17,0x2f,0x3f,0},{0x17,0x2b,0x3b,0},{0x13,0x27,0x33,0},
    {0x13,0x23,0x2f,0},{0x13,0x1f,0x2b,0},{0x0f,0x1b,0x27,0},{0x0f,0x17,0x23,0},
    {0x0b,0x13,0x1b,0},{0x0b,0x0f,0x17,0},{0x07,0x0f,0x13,0},{0x07,0x0b,0x0f,0},
    {0x6f,0x5f,0x5f,0},{0x67,0x5b,0x5b,0},{0x5f,0x53,0x5b,0},{0x5b,0x4f,0x57,0},
    {0x53,0x4b,0x53,0},{0x4b,0x47,0x4f,0},{0x43,0x3f,0x47,0},{0x3b,0x3b,0x3f,0},
    {0x37,0x37,0x3b,0},{0x2f,0x2f,0x33,0},{0x2b,0x2b,0x2f,0},{0x27,0x27,0x27,0},
    {0x23,0x23,0x23,0},{0x1b,0x1b,0x1b,0},{0x17,0x17,0x17,0},{0x13,0x13,0x13,0},
    {0x53,0x77,0x8f,0},{0x43,0x63,0x7b,0},{0x3b,0x5b,0x73,0},{0x2f,0x4f,0x67,0},
    {0x4b,0x97,0xcf,0},{0x3b,0x7b,0xa7,0},{0x2f,0x67,0x8b,0},{0x27,0x53,0x6f,0},
    {0x27,0x9f,0xeb,0},{0x23,0x8b,0xcb,0},{0x1f,0x77,0xaf,0},{0x1b,0x63,0x93,0},
    {0x17,0x4f,0x77,0},{0x0f,0x3b,0x5b,0},{0x0b,0x27,0x3f,0},{0x07,0x17,0x23,0},
    {0x2b,0x3b,0xa7,0},{0x23,0x2f,0x9f,0},{0x1b,0x2b,0x97,0},{0x13,0x27,0x8b,0},
    {0x0f,0x1f,0x7f,0},{0x0b,0x17,0x73,0},{0x07,0x17,0x67,0},{0x00,0x13,0x57,0},
    {0x00,0x0f,0x4b,0},{0x00,0x0f,0x43,0},{0x00,0x0f,0x3b,0},{0x00,0x0b,0x33,0},
    {0x00,0x0b,0x2b,0},{0x00,0x0b,0x23,0},{0x00,0x07,0x1b,0},{0x00,0x07,0x13,0},
    {0x4b,0x5f,0x7b,0},{0x43,0x57,0x73,0},{0x3f,0x53,0x6b,0},{0x3b,0x4f,0x67,0},
    {0x37,0x47,0x5f,0},{0x33,0x43,0x57,0},{0x2f,0x3f,0x53,0},{0x2b,0x37,0x4b,0},
    {0x27,0x33,0x43,0},{0x23,0x2f,0x3f,0},{0x1b,0x27,0x37,0},{0x17,0x23,0x2f,0},
    {0x13,0x1b,0x27,0},{0x0f,0x17,0x1f,0},{0x0b,0x0f,0x17,0},{0x07,0x0b,0x0f,0},
    {0x17,0x3b,0x6f,0},{0x17,0x37,0x5f,0},{0x17,0x2f,0x53,0},{0x17,0x2b,0x43,0},
    {0x13,0x23,0x37,0},{0x0f,0x1b,0x27,0},{0x0b,0x13,0x1b,0},{0x07,0x0b,0x0f,0},
    {0x4f,0x5b,0xb3,0},{0x6f,0x7b,0xbf,0},{0x93,0x9b,0xcb,0},{0xb7,0xbb,0xd7,0},
    {0xdf,0xd7,0xcb,0},{0xd3,0xc7,0xb3,0},{0xc3,0xb7,0x9f,0},{0xb7,0xa7,0x87,0},
    {0xa7,0x97,0x73,0},{0x9b,0x87,0x5b,0},{0x8b,0x77,0x47,0},{0x7f,0x67,0x2f,0},
    {0x6f,0x53,0x17,0},{0x67,0x4b,0x13,0},{0x5b,0x43,0x0f,0},{0x53,0x3f,0x0b,0},
    {0x4b,0x37,0x07,0},{0x3f,0x2f,0x07,0},{0x33,0x27,0x07,0},{0x2b,0x1f,0x00,0},
    {0x1f,0x17,0x00,0},{0x13,0x0f,0x00,0},{0x0b,0x07,0x00,0},{0x00,0x00,0x00,0},
    {0x57,0x57,0x8b,0},{0x4f,0x4f,0x83,0},{0x47,0x47,0x7b,0},{0x43,0x43,0x73,0},
    {0x3b,0x3b,0x6b,0},{0x33,0x33,0x63,0},{0x2f,0x2f,0x5b,0},{0x2b,0x2b,0x57,0},
    {0x23,0x23,0x4b,0},{0x1f,0x1f,0x3f,0},{0x1b,0x1b,0x33,0},{0x13,0x13,0x2b,0},
    {0x0f,0x0f,0x1f,0},{0x0b,0x0b,0x13,0},{0x07,0x07,0x0b,0},{0x00,0x00,0x00,0},
    {0x7b,0x9f,0x97,0},{0x73,0x97,0x8f,0},{0x6b,0x8b,0x87,0},{0x63,0x83,0x7f,0},
    {0x5f,0x7b,0x77,0},{0x57,0x73,0x73,0},{0x4f,0x6b,0x6b,0},{0x47,0x63,0x63,0},
    {0x43,0x5b,0x5b,0},{0x3b,0x4f,0x4f,0},{0x33,0x43,0x43,0},{0x2b,0x37,0x37,0},
    {0x23,0x2f,0x2f,0},{0x1b,0x23,0x23,0},{0x13,0x17,0x17,0},{0x0b,0x0f,0x0f,0},
    {0x3f,0x4b,0x9f,0},{0x37,0x43,0x93,0},{0x2f,0x3b,0x8b,0},{0x27,0x37,0x7f,0},
    {0x23,0x2f,0x77,0},{0x1b,0x2b,0x6b,0},{0x17,0x23,0x63,0},{0x13,0x1f,0x57,0},
    {0x0f,0x1b,0x4f,0},{0x0b,0x17,0x43,0},{0x0b,0x13,0x37,0},{0x07,0x0f,0x2b,0},
    {0x07,0x0b,0x1f,0},{0x00,0x07,0x17,0},{0x00,0x00,0x0b,0},{0x00,0x00,0x00,0},
    {0xcf,0x7b,0x77,0},{0xc3,0x73,0x6f,0},{0xb7,0x6b,0x67,0},{0xa7,0x63,0x63,0},
    {0x9b,0x5b,0x5b,0},{0x8f,0x57,0x53,0},{0x7f,0x4f,0x4b,0},{0x73,0x47,0x47,0},
    {0x67,0x3f,0x3f,0},{0x57,0x37,0x37,0},{0x4b,0x2f,0x2f,0},{0x3f,0x27,0x27,0},
    {0x2f,0x1f,0x23,0},{0x23,0x17,0x1b,0},{0x17,0x0f,0x13,0},{0x07,0x07,0x0b,0},
    {0x7b,0xab,0x9b,0},{0x6f,0x9f,0x8f,0},{0x63,0x97,0x87,0},{0x57,0x8b,0x7b,0},
    {0x4b,0x83,0x73,0},{0x43,0x77,0x67,0},{0x3b,0x6f,0x5f,0},{0x33,0x67,0x57,0},
    {0x27,0x5b,0x4b,0},{0x1b,0x4f,0x3f,0},{0x13,0x43,0x37,0},{0x0b,0x3b,0x2f,0},
    {0x07,0x2f,0x23,0},{0x00,0x23,0x1b,0},{0x00,0x17,0x13,0},{0x00,0x0f,0x0b,0},
    {0x00,0xff,0x00,0},{0x0f,0xe7,0x23,0},{0x1b,0xd3,0x3f,0},{0x27,0xbb,0x53,0},
    {0x2f,0xa7,0x5f,0},{0x33,0x8f,0x5f,0},{0x33,0x7b,0x5f,0},{0xff,0xff,0xff,0},
    {0xd3,0xff,0xff,0},{0xa7,0xff,0xff,0},{0x7f,0xff,0xff,0},{0x53,0xff,0xff,0},
    {0x27,0xff,0xff,0},{0x1f,0xeb,0xff,0},{0x17,0xd7,0xff,0},{0x0f,0xbf,0xff,0},
    {0x07,0xab,0xff,0},{0x00,0x93,0xff,0},{0x00,0x7f,0xef,0},{0x00,0x6b,0xe3,0},
    {0x00,0x57,0xd3,0},{0x00,0x47,0xc7,0},{0x00,0x3b,0xb7,0},{0x00,0x2b,0xab,0},
    {0x00,0x1f,0x9b,0},{0x00,0x17,0x8f,0},{0x00,0x0f,0x7f,0},{0x00,0x07,0x73,0},
    {0x00,0x00,0x5f,0},{0x00,0x00,0x47,0},{0x00,0x00,0x2f,0},{0x00,0x00,0x1b,0},
    {0x00,0x00,0xef,0},{0xff,0x37,0x37,0},{0x00,0x00,0xff,0},{0xff,0x00,0x00,0},
    {0x23,0x2b,0x2b,0},{0x17,0x1b,0x1b,0},{0x0f,0x13,0x13,0},{0x7f,0x97,0xeb,0},
    {0x53,0x73,0xc3,0},{0x33,0x57,0x9f,0},{0x1b,0x3f,0x7b,0},{0xc7,0xd3,0xeb,0},
    {0x9b,0xab,0xc7,0},{0x77,0x8b,0xa7,0},{0x57,0x6b,0x87,0},{0x53,0x5b,0x9f,0}
    };

static UINT Create256Palette (HDC);

// ===========================================================================
// Name.......: Create256Palette()
// Description:	This function creates a 256 color palette.
// Parameters.: hDC						- handle to the device context
// Returns....: UINT					- a return code
// ===========================================================================
static UINT
    Create256Palette (HDC hDC)
{
    LOGPALETTE		*pLogPal;
    int				i;

    pLogPal = (LOGPALETTE *) malloc(sizeof(LOGPALETTE) +
                                    256 * sizeof(PALETTEENTRY));

    if (pLogPal == (LOGPALETTE *) NULL)
    {
        return iERR_RENDER_ALLOC_PAL;
    }

    pLogPal->palVersion = 0x300;
    pLogPal->palNumEntries = 256;

    for (i=0; i < 256; i++)
    {
        pLogPal->palPalEntry[i].peRed = rgbQ2Palette[i].rgbRed;
        pLogPal->palPalEntry[i].peBlue = rgbQ2Palette[i].rgbBlue;
        pLogPal->palPalEntry[i].peGreen = rgbQ2Palette[i].rgbGreen;
        pLogPal->palPalEntry[i].peFlags = PC_NOCOLLAPSE;
    }

    if ((hPalette = CreatePalette (pLogPal)) == NULL)
    {
        free (pLogPal);
        return iERR_RENDER_PAL_CREATE;
    }

    if ((hpalOld = SelectPalette(hDC, hPalette, FALSE)) == NULL)
    {
        free (pLogPal);
        return iERR_RENDER_PAL_SEL;
    }

    if (RealizePalette(hDC) == GDI_ERROR)
    {
        free (pLogPal);
        return iERR_RENDER_PAL_REALIZE;
    }

    if (hpalOld)
    {
        SelectPalette(hDC, hpalOld, FALSE);
    }

    free (pLogPal);

    return iRC_OK;
} // Create256Color

// ===========================================================================
// Name.......: Realize256Palette()
// Description:	This function realizes the 256 color palette.
// Parameters.: hDC						- handle to the device context
// Returns....: UINT					- a return code
// ===========================================================================
UINT
Realize256Palette (HDC hDC)
{
    hpalOld = SelectPalette (hDC, hPalette, FALSE);
    RealizePalette (hDC);

    return iRC_OK;
}

// ===========================================================================
// Name.......: InitPalette()
// Description:	This function initializes the palette functions.
// Parameters.: hDC						- handle to the device context
// Returns....: BOOL					- true indicates a 256 color palette
// ===========================================================================
UINT
InitPalette (HDC hDC)
{
    UINT rc;

    bUses256Color = GetDeviceCaps(hDC, RASTERCAPS) & RC_PALETTE;

    if (bUses256Color)
    {
        if ((rc = Create256Palette (hDC)) != iRC_OK)
        {
            return rc;
        }
    }

    return iRC_OK;
}

// ===========================================================================
// Name.......: Restore256Palette()
// Description:	This function restores the old 256 color palette.
// Parameters.: hDC						- handle to the device context
// Returns....: UINT					- a return code
// ===========================================================================
UINT
Restore256Palette (HDC hDC)
{
    if (hpalOld)
    {
        SelectPalette(hDC, hpalOld, FALSE);
    }

    return iRC_OK;
}

// ===========================================================================
// Name.......: Set256Palette()
// Description:	This function sets a 256 color palette.
// Parameters.: RGBQUAD *				- pointer to a palette
// Returns....: NIL
// ===========================================================================
void
Set256Palette (RGBQUAD *pColors)
{
    int i;

    for (i=0; i < 256; i++)
    {
        pColors[i].rgbRed	= rgbQ2Palette[i].rgbRed;
        pColors[i].rgbBlue	= rgbQ2Palette[i].rgbBlue;
        pColors[i].rgbGreen	= rgbQ2Palette[i].rgbGreen;
        pColors[i].rgbReserved	= 0;
    }
}

// ===========================================================================
// Name.......: SetGreyscalePalette()
// Description:	This function sets a 256 color greyscale palette.
// Parameters.: RGBQUAD *				- pointer to a palette
// Returns....: NIL
// ===========================================================================
void
SetGreyscalePalette (RGBQUAD *pColors)
{
    int i;

    for (i=0; i < 256; i++)
    {
        pColors[i].rgbRed	= i;
        pColors[i].rgbBlue	= i;
        pColors[i].rgbGreen	= i;
        pColors[i].rgbReserved	= 0;
    }

    pColors[iMAX_COLOR].rgbRed		= rgbQ2Palette[iBACKGRND_COLOR].rgbRed;
    pColors[iMAX_COLOR].rgbBlue		= rgbQ2Palette[iBACKGRND_COLOR].rgbBlue;
    pColors[iMAX_COLOR].rgbGreen	= rgbQ2Palette[iBACKGRND_COLOR].rgbGreen;
    pColors[iMAX_COLOR].rgbReserved	= 0;
}

// ===========================================================================
// Name.......: Uses256Palette()
// Description:	This function determines if the given device context uses the
//				a 256 color palette.
// Parameters.: hDC						- handle to the device context
// Returns....: BOOL					- true indicates a 256 color palette
// ===========================================================================
BOOL
Uses256Palette ()
{
    return bUses256Color;
}